extends layout
  
block title
  | Nomster â€” Ruby on Rails Development
block content  
  article
    section.m-marquee#nomster
      hgroup
        h1 Nomster
        h2.subheader Ruby on Rails Development
        a.cta.white(href="http://nomster-john-ellison.herokuapp.com") Check Out The App
    .main-article-container
      .main-article-content 
        h3 The Story
        p For months I had been looking for a great way to immerse myself in learning how to code. After reading through every coding bootcamp website and review, I finally settled on 
          a(href="http://thefirehoseproject.com") The Firehose Project.

        p The Firehose Project is an online coding bootcamp based in Boston. The Firehose motto is &ldquo;We change peoples' lives so they can do what they love every single day.&rdquo;

        p Their motto sounded a lot like my mission for my freelance work, so I decided to learn more. After talking with Marco over at The Firehose Project I committed to invest the next three months to The Firehose Project. I really liked their curriculum and the way they customized their curriculum to each of their students.

        h3 The Problem
        p Besides basic Javascript and some  
          a(href="http://nodeschool.io/") NodeJS tutorials
          | , I had little experience programming. I knew basic Object Oriented concepts from 
          a(href="http://www.lynda.com/Programming-tutorials/Foundations-of-Programming-Object-Oriented-Design/96949-2.html") Lynda's Foundations of Programming
          |  course, but that was about it.

        p I taught myself HTML, CSS, SASS, Javascript and jQuery. While I was competent in my craft, I knew I could learn faster by immersing myself in a environment with mentors and fellow developers.

        h3 The Goal
        p The goal of our second project was to learn Ruby on Rails fundamentals through building a Yelp clone.

        h3 My Approach
        p Before starting The Firehose project I went through the 
          a(href="http://www.codecademy.com/tracks/ruby") Ruby Track
          |  at Codecademy. I wanted a basic understanding of the Ruby languaged before I jumped into building an application in Rails.

        h3 My Process

        h4.subheader Step 1. Analyzing Wireframes
        p As part of the course instructions, each student is given a wireframe of the yelp clone. As an initial step I looked over these wireframes to break down the project into a series of smaller steps.

        img(src="images/homepage-wireframe.png", alt="wireframe of the nomster homepage")

        img(src="images/places-wireframe.png", alt="wireframe of the nomster places page")

        img(src="images/comment-wireframe.png", alt="wireframe of the nomster comment modal")

        img(src="images/add-place-wireframe.png", alt="wireframe of the nomster add place page")

        img(src="images/dashboard-wireframe.png", alt="wireframe of the nomster dashboard page")

        h4.subheader Step 2. Data Modeling
        p Based upon the wireframes I knew that I needed to model the data with the following entities:
        ul
          li User
          li Place
          li Photo
          li Comment

        p I created a basic diagram on dbpatterns to help me visualize Nomster's database.

        img(src="images/nomster-db-pattern.png", alt="modeling the database for the nomster app")

        h4.subheader Step 3. Task Breakdown
        p I looked at the steps listed in the Nomster instructions and broke down the major tasks into a 
          a(href="https://trello.com/") Trello 
          |  board.

        h4.subheader Step 4. Models &amp; Migrations
        p Following the database pattern I generated each of the models and migrations:

        pre: code.language-bash rails generate model Place
        pre: code.language-bash rails generate model Photo
        pre: code.language-bash rails generate model Comment

        pre: code.language-ruby class CreatePlaces < ActiveRecord::Migration
          |   def change
          |     create_table :places do |t|
          |       t.string :name
          |       t.text :description
          |       t.string :address
          |       t.timestamps
          |     end
          |   end
          | end

        pre: code.language-ruby class DeviseCreateUsers < ActiveRecord::Migration
          |   def change
          |     create_table(:users) do |t|
          |       ## Database authenticatable
          |       t.string :email,              null: false, default: ""
          |       t.string :encrypted_password, null: false, default: ""
          | 
          |       ## Recoverable
          |       t.string   :reset_password_token
          |       t.datetime :reset_password_sent_at
          | 
          |       ## Rememberable
          |       t.datetime :remember_created_at
          | 
          |       ## Trackable
          |       t.integer  :sign_in_count, default: 0, null: false
          |       t.datetime :current_sign_in_at
          |       t.datetime :last_sign_in_at
          |       t.inet     :current_sign_in_ip
          |       t.inet     :last_sign_in_ip

          |       t.timestamps
          |     end
          | 
          |     add_index :users, :email,                unique: true
          |     add_index :users, :reset_password_token, unique: true
          |   end
          | end


        pre: code.language-ruby class AlterUserIdAddColumn < ActiveRecord::Migration
          |   def change
          |     add_column :places, :user_id, :integer
          |     add_index :places, :user_id
          |   end
          | end


        pre: code.language-ruby class CreateComments < ActiveRecord::Migration
          |   def change
          |     create_table :comments do |t|
          |       t.text :message
          |       t.string :rating
          | 
          |       t.integer :user_id
          |       t.integer :place_id
          | 
          |       t.timestamps
          |     end
          | 
          |     add_index :comments, [:user_id, :place_id]
          |     add_index :comments, :place_id
          |   end
          | end

        pre: code.language-ruby class CreatePhotos < ActiveRecord::Migration
          |   def change
          |     create_table :photos do |t|
          |       t.text :caption
          |       t.integer :place_id
          |       t.integer :user_id
          |       t.timestamps
          |     end
          | 
          |     add_index :photos, [:user_id, :place_id]
          |     add_index :photos, :place_id
          |   end
          |end

        pre: code.language-ruby class AddPictureToPhotos < ActiveRecord::Migration
          |   def change
          |     add_column :photos, :picture, :string
          |   end
          | end

        h4.subheader Step 4. Layout
        p I usually use Foundation since achieving semantic markup is much easier in Foundation. For the Nomster app, I decided to use Bootstrap instead. I love learning and figured giving Bootstrap a try would give me another tool in my toolbelt.

        p Starting on the homepage, I looped through an array of places in the database and created a masonry grid with each place item.

        p I used 
          a(href="https://github.com/kristianmandrup/masonry-rails") masonry-rails
          |  for masonry and infinite scroll, and 
          a(href="https://github.com/amatsuda/kaminari") kaminari
          |  for pagination.

        img(src="images/nomster-masonry-infinite-scroll.jpg", alt="adding masonry grid and infinite scroll to my nomster app for the firehose project")

        p I then moved to the places/show page and added the basic layout with Google Maps integration via 
          a(href="https://github.com/alexreisner/geocoder") geocoder
          |  and the 
          a(href="https://developers.google.com/maps/") Google Maps API.

        img(src="images/nomster-places-page.jpg", alt="laying out the nomster places page")

        p I used 
          a(href="https://github.com/plataformatec/simple_form") Simple Form
          |  and Bootstrap modals to add photos and comments to each place.

        img(src="images/nomster-add-photo.jpg", alt="adding photos to the nomster app")

        img(src="images/nomster-add-comment.jpg", alt="adding comments to the nomster app")

        p I then used  
          a(href="http://www.informit.com/articles/article.aspx?p=1671632&seqNum=6") Rails Singleton Resource Routes
          |  to add a dashboard for each user.

        img(src="images/nomster-user-dashboard.jpg", alt="nomster user dashboard")

        h4.subheader Step 5. Back-End
        p Since a majority of the back-end code was supplied by The Firehose Project, I can't take credit for the back-end work. I abided in the practice of typing out each line of code without copy-pasting. I did my best to grasp what each part of the code was doing and why. It wasn't until we started the group project did I really get a handle on writing Ruby and working with Rails.

        h3 Final Outcome
        p I am pretty pleased with the outcome of my first full-stack project. I learned a lot about 'The Rails Way', and took a few deep dives to understand the rails core and how it works. The satisfaction of creating a Rails app in a few days was huge. While I may not have written the back-end code, I felt that through process of imitation I was learning more than I would have on my own.

        p One thought: I wish I would have learned TDD prior to starting this app because I think it would have deepened the habit of TDD's &lsquo;Red&mdash;Green&mdash;Refactor&rsquo; cycle. Once I learned TDD and tried applying it to my existing development habits, it took me some time before the &lsquo;Red&mdash;Green&mdash;Refactor&rsquo; cycle came second nature.